FROM fedora AS BULID
ARG git_branch=main
ARG git_refspec=HEAD

LABEL org.snffio.wwiv.git_branch=${git_branch}
LABEL org.snffio.wwiv.git_refspec=${git_refspec}

RUN dnf -y install dnf-plugins-core
RUN dnf install -y git make ncurses-devel cmake gcc gcc-c++ \
    vim unzip zip findutils iproute procps-ng hostname \
    zlib-devel boost boost-devel cereal-devel \
    fmt-devel gtest-devel gmock-devel 
# DEBIAN:
# RUN apt-get update
# RUN apt-get install -y \
#     build-essential sudo git make libncurses5-dev \
#     libcereal-dev libfmt-dev libgtest-dev libgmock-dev cmake libboost-all-dev \
#     gcc g++ vim unzip zip \
#     findutils iproute2 procps zlib1g-dev

# RUN apt-get upgrade && \
#     rm -rf /var/lib/apt/lists/*

RUN mkdir /opt/wwiv

RUN mkdir /docker
COPY clone-wwiv.sh /docker/clone-wwiv.sh

#RUN mkdir /src
RUN sh /docker/clone-wwiv.sh /src ${git_branch} ${git_refspec}
#COPY /src/. /docker/src

COPY patch-wwiv.sh /docker/patch-wwiv.sh
COPY patches /docker/patches
# RUN sh /docker/patch-wwiv.sh /src/wwiv /docker/patches

COPY build-deps.sh /docker/build-deps.sh
RUN sh /docker/build-deps.sh /src/wwiv

COPY build-wwiv.sh /docker/build-wwiv.sh

RUN sh /docker/build-wwiv.sh /src/wwiv

WORKDIR /opt/wwiv
COPY install-wwiv.sh /docker/install-wwiv.sh
RUN sh /docker/install-wwiv.sh /src/wwiv/build /opt/wwiv

LABEL SITUATION_LAYERIZATION="BOOST"
# Build Stage
FROM alpine as build

# Install necessary build dependencies
RUN apk update && \
    apk add --no-cache wget tar gcc g++ make

# Download and extract Boost source
RUN wget https://boostorg.jfrog.io/artifactory/main/release/1.77.0/source/boost_1_77_0.tar.gz && \
    tar xf boost_1_77_0.tar.gz && \
    cd boost_1_77_0

# Compile Boost
RUN ./bootstrap.sh && \
    ./b2

# Copy compiled Boost libraries to a temporary directory
RUN mkdir -p /tmp/boost-libraries && \
    cp -r boost_1_77_0/stage/lib/* /tmp/boost-libraries

LABEL SITUATION_LAYERIZATION="DEPLOY BOOST"
# Cleanup
RUN rm -rf boost_1_77_0 && \
    rm boost_1_77_0.tar.gz

# Deploy Stage
FROM busybox

# Copy compiled Boost libraries from the build stage
COPY --from=build /tmp/boost-libraries /usr/lib

# Cleanup temporary directory
RUN rm -rf /tmp/boost-libraries

# Additional instructions for your application or configuration

LABEL SITUATION_LAYERIZATION="FINAL"
FROM busybox  

COPY --from=BULID /opt/wwiv /opt/wwiv/
RUN find /opt/wwiv -type f -exec chmod +x {} \;

# RUN dnf -y install dnf-plugins-core
# RUN dnf install -y git make ncurses-devel cmake gcc gcc-c++ vim unzip zip findutils iproute procps-ng hostname zlib-devel
#ALPINE: 
#RUN apk add --no-cache git make ncurses-dev cmake gcc g++ vim unzip zip findutils iproute2 procps zlib-dev
#DEBIAN:
# RUN apt-get update && \
#     apt-get install -y build-essential sudo git make libncurses5-dev \
#     libcereal-dev libfmt-dev libgtest-dev libgmock-dev cmake libboost-all-dev \
#     gcc g++ vim unzip zip nodejs \
#     findutils iproute2 procps zlib1g-dev
# BUSYBOX
RUN wget -O /bin/git https://busybox.net/downloads/binaries/1.33.0-defconfig-multiarch/busybox-x86_64 && chmod +x /bin/git && \
    wget -O /bin/make https://busybox.net/downloads/binaries/1.33.0-defconfig-multiarch/busybox-x86_64 && chmod +x /bin/make && \
    wget -O /bin/cmake https://busybox.net/downloads/binaries/1.33.0-defconfig-multiarch/busybox-x86_64 && chmod +x /bin/cmake && \
    wget -O /bin/gcc https://busybox.net/downloads/binaries/1.33.0-defconfig-multiarch/busybox-x86_64 && chmod +x /bin/gcc && \
    wget -O /bin/g++ https://busybox.net/downloads/binaries/1.33.0-defconfig-multiarch/busybox-x86_64 && chmod +x /bin/g++ && \
    wget -O /bin/vim https://busybox.net/downloads/binaries/1.33.0-defconfig-multiarch/busybox-x86_64 && chmod +x /bin/vim && \
    wget -O /bin/unzip https://busybox.net/downloads/binaries/1.33.0-defconfig-multiarch/busybox-x86_64 && chmod +x /bin/unzip && \
    wget -O /bin/zip https://busybox.net/downloads/binaries/1.33.0-defconfig-multiarch/busybox-x86_64 && chmod +x /bin/zip && \
    wget -O /bin/find https://busybox.net/downloads/binaries/1.33.0-defconfig-multiarch/busybox-x86_64 && chmod +x /bin/find && \
    wget -O /bin/ip https://busybox.net/downloads/binaries/1.33.0-defconfig-multiarch/busybox-x86_64 && chmod +x /bin/ip && \
    wget -O /bin/ps https://busybox.net/downloads/binaries/1.33.0-defconfig-multiarch/busybox-x86_64 && chmod +x /bin/ps && \
    wget -O /bin/hostname https://busybox.net/downloads/binaries/1.33.0-defconfig-multiarch/busybox-x86_64 && chmod +x /bin/hostname && \
    wget -O /bin/zlib https://busybox.net/downloads/binaries/1.33.0-defconfig-multiarch/busybox-x86_64 && chmod +x /bin/zlib

# Install Node.js
RUN wget -O /tmp/node.tar.xz https://nodejs.org/dist/v14.18.1/node-v14.18.1-linux-x64.tar.xz && \
    tar -xJf /tmp/node.tar.xz -C /usr/local --strip-components=1 && \
    rm /tmp/node.tar.xz

EXPOSE 7777

COPY entrypoint.sh /docker/entrypoint.sh
ENTRYPOINT ["sh", "/docker/entrypoint.sh"]
WORKDIR /srv/wwiv
VOLUME /srv/wwiv

#FEDORA:
RUN useradd -d /srv/wwiv wwiv
#ALPINE:
#RUN adduser -D -h /srv/wwiv wwiv
# #DEBIAN
# RUN adduser --disabled-password --home /srv/wwiv wwiv
CMD ["/opt/wwiv/wwivd", "--wwiv_user=wwiv"]
